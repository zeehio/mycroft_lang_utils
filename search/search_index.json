{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mycroft Language Utils language specific parsing and formatting code extracted from mycroft-core, for standalone usage NOTE: no affiliation with MycroftAI, code may be out of sync last synchronization - 04 Apr 2019 Mycroft Language Utils Format pronounce numbers pronounce datetime objects pronounce durations Parse Numbers Durations Extract dates Credits Format Convert data into spoken equivalents pronounce numbers spoken versions of numbers from mycroft_lang_utils.format import nice_number, pronounce_number assert nice_number(25/6) == \"4 and a sixth\" assert nice_number(201) == \"201\" assert nice_number(3.14159269) == \"3 and a seventh\" assert pronounce_number(3.14159269) == \"three point one four\" assert pronounce_number(0) == \"zero\" assert pronounce_number(10) == \"ten\" assert pronounce_number(201) == \"two hundred and one\" assert pronounce_number(102.3) == \"one hundred and two point three\" assert pronounce_number( 4092949192) == \"four billion, ninety two million, nine hundred and forty nine thousand, one hundred and ninety two\" assert pronounce_number(100034000000299792458, short_scale=True) == \\ \"one hundred quintillion, thirty four quadrillion, \" \\ \"two hundred and ninety nine million, seven hundred and ninety \" \\ \"two thousand, four hundred and fifty eight\" assert pronounce_number(100034000000299792458, short_scale=False) == \\ \"one hundred trillion, thirty four thousand billion, \" \\ \"two hundred and ninety nine million, seven hundred and ninety \" \\ \"two thousand, four hundred and fifty eight\" pronounce datetime objects spoken date for datetime.datetime objects from mycroft_lang_utils.format import nice_date, nice_date_time, nice_time import datetime dt = datetime.datetime(2017, 1, 31, 13, 22, 3) assert nice_date(dt) == \"tuesday, january thirty-first, twenty seventeen\" assert nice_time(dt) == \"one twenty two\" assert nice_time(dt, use_ampm=True) == \"one twenty two p.m.\" assert nice_time(dt, speech=False) == \"1:22\" assert nice_time(dt, speech=False, use_ampm=True) == \"1:22 PM\" assert nice_time(dt, speech=False, use_24hour=True) == \"13:22\" assert nice_time(dt, speech=False, use_24hour=True, use_ampm=True) == \"13:22\" assert nice_time(dt, use_24hour=True, use_ampm=True) == \"thirteen twenty two\" assert nice_time(dt, use_24hour=True, use_ampm=False) == \"thirteen twenty two\" assert nice_date_time(dt) == \"tuesday, january thirty-first, twenty seventeen at one twenty two\" pronounce durations spoken number of seconds or datetime.timedelta objects from mycroft_lang_utils.format import nice_duration assert nice_duration(1) == \"one second\" assert nice_duration(3) == \"three seconds\" assert nice_duration(1, speech=False) == \"0:01\" assert nice_duration(61), \"one minute one second\" assert nice_duration(61, speech=False) == \"1:01\" assert nice_duration(5000) == \"one hour twenty three minutes twenty seconds\" assert nice_duration(5000, speech=False), \"1:23:20\" assert nice_duration(50000) == \"thirteen hours fifty three minutes twenty seconds\" assert nice_duration(50000, speech=False) == \"13:53:20\" assert nice_duration(500000) == \"five days eighteen hours fifty three minutes twenty seconds\" assert nice_duration(500000, speech=False), \"5d 18:53:20\" from datetime import timedelta assert nice_duration(timedelta(seconds=500000), speech=False) == \"5d 18:53:20\" Parse Extract data from natural language text Numbers from mycroft_lang_utils.parse import extract_number, extract_numbers # extract a number assert extract_number(\"nothing\") is False assert extract_number(\"two million five hundred thousand tons of spinning \" \"metal\") == 2500000 assert extract_number(\"six trillion\") == 6000000000000.0 assert extract_number(\"six trillion\", short_scale=False) == 6e+18 assert extract_number(\"1 and 3/4 cups\") == 1.75 assert extract_number(\"1 cup and a half\") == 1.5 ## extracts all numbers assert extract_numbers(\"nothing\") == [] assert extract_numbers(\"this is a one twenty one test\") == [1.0, 21.0] assert extract_numbers(\"1 dog, seven pigs, macdonald had a farm, \" \"3 times 5 macarena\") == [1, 7, 3, 5] Durations extract datetime.timedelta objects ## extract durations from mycroft_lang_utils.parse import extract_duration from datetime import timedelta assert extract_duration(\"nothing\") == (None, 'nothing') assert extract_duration(\"Nineteen minutes past the hour\") == ( timedelta(minutes=19), \"past the hour\") assert extract_duration(\"wake me up in three weeks, four hundred ninety seven\" \" days, and three hundred 91.6 seconds\") == ( timedelta(weeks=3, days=497, seconds=391.6), \"wake me up in , , and\") assert extract_duration( \"The movie is one hour, fifty seven and a half minutes long\") == ( timedelta(hours=1, minutes=57.5), \"the movie is , long\") Extract dates extract datetime.datetime objects ## extract date times from datetime import datetime from mycroft_lang_utils.parse import extract_datetime, normalize def extractWithFormat(text): date = datetime(2017, 6, 27, 13, 4) # Tue June 27, 2017 @ 1:04pm [extractedDate, leftover] = extract_datetime(text, date) extractedDate = extractedDate.strftime(\"%Y-%m-%d %H:%M:%S\") return [extractedDate, leftover] def testExtract(text, expected_date, expected_leftover): res = extractWithFormat(normalize(text)) assert res[0] == expected_date assert res[1] == expected_leftover testExtract(\"now is the time\", \"2017-06-27 13:04:00\", \"is time\") testExtract(\"in a couple minutes\", \"2017-06-27 13:06:00\", \"\") testExtract(\"What is the day after tomorrow's weather?\", \"2017-06-29 00:00:00\", \"what is weather\") testExtract(\"Remind me at 10:45 pm\", \"2017-06-27 22:45:00\", \"remind me\") testExtract(\"what is the weather on friday morning\", \"2017-06-30 08:00:00\", \"what is weather\") testExtract(\"what is tomorrow's weather\", \"2017-06-28 00:00:00\", \"what is weather\") testExtract(\"remind me to call mom next tuesday\", \"2017-07-04 00:00:00\", \"remind me to call mom\") testExtract(\"remind me to call mom in 3 weeks\", \"2017-07-18 00:00:00\", \"remind me to call mom\") testExtract(\"set an alarm for tonight 9:30\", \"2017-06-27 21:30:00\", \"set alarm\") testExtract(\"on the evening of june 5th 2017 remind me to call my mother\", \"2017-06-05 19:00:00\", \"remind me to call my mother\") Credits MycroftAI","title":"Home"},{"location":"#mycroft-language-utils","text":"language specific parsing and formatting code extracted from mycroft-core, for standalone usage NOTE: no affiliation with MycroftAI, code may be out of sync last synchronization - 04 Apr 2019 Mycroft Language Utils Format pronounce numbers pronounce datetime objects pronounce durations Parse Numbers Durations Extract dates Credits","title":"Mycroft Language Utils"},{"location":"#format","text":"Convert data into spoken equivalents","title":"Format"},{"location":"#pronounce-numbers","text":"spoken versions of numbers from mycroft_lang_utils.format import nice_number, pronounce_number assert nice_number(25/6) == \"4 and a sixth\" assert nice_number(201) == \"201\" assert nice_number(3.14159269) == \"3 and a seventh\" assert pronounce_number(3.14159269) == \"three point one four\" assert pronounce_number(0) == \"zero\" assert pronounce_number(10) == \"ten\" assert pronounce_number(201) == \"two hundred and one\" assert pronounce_number(102.3) == \"one hundred and two point three\" assert pronounce_number( 4092949192) == \"four billion, ninety two million, nine hundred and forty nine thousand, one hundred and ninety two\" assert pronounce_number(100034000000299792458, short_scale=True) == \\ \"one hundred quintillion, thirty four quadrillion, \" \\ \"two hundred and ninety nine million, seven hundred and ninety \" \\ \"two thousand, four hundred and fifty eight\" assert pronounce_number(100034000000299792458, short_scale=False) == \\ \"one hundred trillion, thirty four thousand billion, \" \\ \"two hundred and ninety nine million, seven hundred and ninety \" \\ \"two thousand, four hundred and fifty eight\"","title":"pronounce numbers"},{"location":"#pronounce-datetime-objects","text":"spoken date for datetime.datetime objects from mycroft_lang_utils.format import nice_date, nice_date_time, nice_time import datetime dt = datetime.datetime(2017, 1, 31, 13, 22, 3) assert nice_date(dt) == \"tuesday, january thirty-first, twenty seventeen\" assert nice_time(dt) == \"one twenty two\" assert nice_time(dt, use_ampm=True) == \"one twenty two p.m.\" assert nice_time(dt, speech=False) == \"1:22\" assert nice_time(dt, speech=False, use_ampm=True) == \"1:22 PM\" assert nice_time(dt, speech=False, use_24hour=True) == \"13:22\" assert nice_time(dt, speech=False, use_24hour=True, use_ampm=True) == \"13:22\" assert nice_time(dt, use_24hour=True, use_ampm=True) == \"thirteen twenty two\" assert nice_time(dt, use_24hour=True, use_ampm=False) == \"thirteen twenty two\" assert nice_date_time(dt) == \"tuesday, january thirty-first, twenty seventeen at one twenty two\"","title":"pronounce datetime objects"},{"location":"#pronounce-durations","text":"spoken number of seconds or datetime.timedelta objects from mycroft_lang_utils.format import nice_duration assert nice_duration(1) == \"one second\" assert nice_duration(3) == \"three seconds\" assert nice_duration(1, speech=False) == \"0:01\" assert nice_duration(61), \"one minute one second\" assert nice_duration(61, speech=False) == \"1:01\" assert nice_duration(5000) == \"one hour twenty three minutes twenty seconds\" assert nice_duration(5000, speech=False), \"1:23:20\" assert nice_duration(50000) == \"thirteen hours fifty three minutes twenty seconds\" assert nice_duration(50000, speech=False) == \"13:53:20\" assert nice_duration(500000) == \"five days eighteen hours fifty three minutes twenty seconds\" assert nice_duration(500000, speech=False), \"5d 18:53:20\" from datetime import timedelta assert nice_duration(timedelta(seconds=500000), speech=False) == \"5d 18:53:20\"","title":"pronounce durations"},{"location":"#parse","text":"Extract data from natural language text","title":"Parse"},{"location":"#numbers","text":"from mycroft_lang_utils.parse import extract_number, extract_numbers # extract a number assert extract_number(\"nothing\") is False assert extract_number(\"two million five hundred thousand tons of spinning \" \"metal\") == 2500000 assert extract_number(\"six trillion\") == 6000000000000.0 assert extract_number(\"six trillion\", short_scale=False) == 6e+18 assert extract_number(\"1 and 3/4 cups\") == 1.75 assert extract_number(\"1 cup and a half\") == 1.5 ## extracts all numbers assert extract_numbers(\"nothing\") == [] assert extract_numbers(\"this is a one twenty one test\") == [1.0, 21.0] assert extract_numbers(\"1 dog, seven pigs, macdonald had a farm, \" \"3 times 5 macarena\") == [1, 7, 3, 5]","title":"Numbers"},{"location":"#durations","text":"extract datetime.timedelta objects ## extract durations from mycroft_lang_utils.parse import extract_duration from datetime import timedelta assert extract_duration(\"nothing\") == (None, 'nothing') assert extract_duration(\"Nineteen minutes past the hour\") == ( timedelta(minutes=19), \"past the hour\") assert extract_duration(\"wake me up in three weeks, four hundred ninety seven\" \" days, and three hundred 91.6 seconds\") == ( timedelta(weeks=3, days=497, seconds=391.6), \"wake me up in , , and\") assert extract_duration( \"The movie is one hour, fifty seven and a half minutes long\") == ( timedelta(hours=1, minutes=57.5), \"the movie is , long\")","title":"Durations"},{"location":"#extract-dates","text":"extract datetime.datetime objects ## extract date times from datetime import datetime from mycroft_lang_utils.parse import extract_datetime, normalize def extractWithFormat(text): date = datetime(2017, 6, 27, 13, 4) # Tue June 27, 2017 @ 1:04pm [extractedDate, leftover] = extract_datetime(text, date) extractedDate = extractedDate.strftime(\"%Y-%m-%d %H:%M:%S\") return [extractedDate, leftover] def testExtract(text, expected_date, expected_leftover): res = extractWithFormat(normalize(text)) assert res[0] == expected_date assert res[1] == expected_leftover testExtract(\"now is the time\", \"2017-06-27 13:04:00\", \"is time\") testExtract(\"in a couple minutes\", \"2017-06-27 13:06:00\", \"\") testExtract(\"What is the day after tomorrow's weather?\", \"2017-06-29 00:00:00\", \"what is weather\") testExtract(\"Remind me at 10:45 pm\", \"2017-06-27 22:45:00\", \"remind me\") testExtract(\"what is the weather on friday morning\", \"2017-06-30 08:00:00\", \"what is weather\") testExtract(\"what is tomorrow's weather\", \"2017-06-28 00:00:00\", \"what is weather\") testExtract(\"remind me to call mom next tuesday\", \"2017-07-04 00:00:00\", \"remind me to call mom\") testExtract(\"remind me to call mom in 3 weeks\", \"2017-07-18 00:00:00\", \"remind me to call mom\") testExtract(\"set an alarm for tonight 9:30\", \"2017-06-27 21:30:00\", \"set alarm\") testExtract(\"on the evening of june 5th 2017 remind me to call my mother\", \"2017-06-05 19:00:00\", \"remind me to call my mother\")","title":"Extract dates"},{"location":"#credits","text":"MycroftAI","title":"Credits"},{"location":"mycroft_lang_utils.bracket_expansion/","text":"Module mycroft_lang_utils.bracket_expansion Fragment (Abstract) empty sentence fragment expand def expand(self) Expanded version of the fragment. In this case an empty sentence. Returns: List<List<str>>: A list with an empty sentence (= token/string list) tree def tree(self) Return the represented sentence tree as raw data. Options A Combination of possible sub-sentences. Construct with List as argument. expand def expand(self) Returns all of its options as seperated sub-sentences. Returns: List<List<str>>: A list containing the sentences created by all expansions of its sub-sentences Sentence A Sentence made of several concatenations/words. Construct with a List as argument. expand def expand(self) Creates a combination of all sub-sentences. Returns: List<List<str>>: A list with all subsentence expansions combined in every possible way SentenceTreeParser Generate sentence token trees from a list of tokens ['1', '(', '2', '|', '3, ')'] -> [['1', '2'], ['1', '3']] expand_parentheses def expand_parentheses(self) Word Single word in the sentence tree. Construct with a string as argument. expand def expand(self) Creates one sentence that contains exactly that word. Returns: List<List<str>>: A list with the given string as sentence (= token/string list)","title":"bracket_expansion"},{"location":"mycroft_lang_utils.bracket_expansion/#module-mycroft_lang_utilsbracket_expansion","text":"","title":"Module mycroft_lang_utils.bracket_expansion"},{"location":"mycroft_lang_utils.bracket_expansion/#fragment","text":"(Abstract) empty sentence fragment","title":"Fragment"},{"location":"mycroft_lang_utils.bracket_expansion/#expand","text":"def expand(self) Expanded version of the fragment. In this case an empty sentence. Returns: List<List<str>>: A list with an empty sentence (= token/string list)","title":"expand"},{"location":"mycroft_lang_utils.bracket_expansion/#tree","text":"def tree(self) Return the represented sentence tree as raw data.","title":"tree"},{"location":"mycroft_lang_utils.bracket_expansion/#options","text":"A Combination of possible sub-sentences. Construct with List as argument.","title":"Options"},{"location":"mycroft_lang_utils.bracket_expansion/#expand_1","text":"def expand(self) Returns all of its options as seperated sub-sentences. Returns: List<List<str>>: A list containing the sentences created by all expansions of its sub-sentences","title":"expand"},{"location":"mycroft_lang_utils.bracket_expansion/#sentence","text":"A Sentence made of several concatenations/words. Construct with a List as argument.","title":"Sentence"},{"location":"mycroft_lang_utils.bracket_expansion/#expand_2","text":"def expand(self) Creates a combination of all sub-sentences. Returns: List<List<str>>: A list with all subsentence expansions combined in every possible way","title":"expand"},{"location":"mycroft_lang_utils.bracket_expansion/#sentencetreeparser","text":"Generate sentence token trees from a list of tokens ['1', '(', '2', '|', '3, ')'] -> [['1', '2'], ['1', '3']]","title":"SentenceTreeParser"},{"location":"mycroft_lang_utils.bracket_expansion/#expand95parentheses","text":"def expand_parentheses(self)","title":"expand_parentheses"},{"location":"mycroft_lang_utils.bracket_expansion/#word","text":"Single word in the sentence tree. Construct with a string as argument.","title":"Word"},{"location":"mycroft_lang_utils.bracket_expansion/#expand_3","text":"def expand(self) Creates one sentence that contains exactly that word. Returns: List<List<str>>: A list with the given string as sentence (= token/string list)","title":"expand"},{"location":"mycroft_lang_utils.format/","text":"Module mycroft_lang_utils.format nice_date def nice_date(dt, lang=None, now=None) Format a datetime to a pronounceable date For example, generates 'tuesday, june the fifth, 2018' Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided now (datetime): Current date. If provided, the returned date for speech will be shortened accordingly: No year is returned if now is in the same year as td, no month is returned if now is in the same month as td. If now and td is the same day, 'today' is returned. Returns: (str): The formatted date string nice_date_time def nice_date_time(dt, lang=None, now=None, use_24hour=False, use_ampm=False) Format a datetime to a pronounceable date and time For example, generate 'tuesday, june the fifth, 2018 at five thirty' Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided now (datetime): Current date. If provided, the returned date for speech will be shortened accordingly: No year is returned if now is in the same year as td, no month is returned if now is in the same month as td. If now and td is the same day, 'today' is returned. use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted date time string nice_duration def nice_duration(duration, lang=None, speech=True) Convert duration in seconds to a nice spoken timespan Examples: duration = 60 -> \"1:00\" or \"one minute\" duration = 163 -> \"2:43\" or \"two minutes forty three seconds\" Args: duration: time, in seconds lang (str, optional): a BCP-47 language code, None for default speech (bool): format for speech (True) or display (False) Returns: str: timespan as a string nice_number def nice_number(number, lang=None, speech=True, denominators=None) Format a float to human readable functions This function formats a float to human understandable functions. Like 4.5 becomes 4 and a half for speech and 4 1/2 for text Args: number (int or float): the float to format lang (str): code for the language to use speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time def nice_time(dt, lang=None, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) lang (str): code for the language to use speech (bool): format for speech (default/True) or display (False) use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string nice_year def nice_year(dt, lang=None, bc=False) Format a datetime to a pronounceable year For example, generate 'nineteen-hundred and eighty-four' for year 1984 Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided bc (bool) pust B.C. after the year (python does not support dates B.C. in datetime) Returns: (str): The formatted year string pronounce_number def pronounce_number(number, lang=None, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5' would be 'five' Args: number: the number to pronounce short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool) : convert and pronounce in scientific notation Returns: (str): The pronounced number expand_options def expand_options(parentheses_line:str) -> list Convert 'test (a|b)' -> ['test a', 'test b'] Args: parentheses_line: Input line to expand Returns: List of expanded possibilities expand_parentheses def expand_parentheses(sent) ['1', '(', '2', '|', '3, ')'] -> [['1', '2'], ['1', '3']] For example: Will it (rain|pour) (today|tomorrow|)? ----> Will it rain today? Will it rain tomorrow? Will it rain? Will it pour today? Will it pour tomorrow? Will it pour? Args: sent (list<str>): List of tokens in sentence Returns: list<list<str>>: Multiple possible sentences from original join_list def join_list(items, connector, sep=None, lang=None) Join a list into a phrase using the given connector word Examples: join_list([1,2,3], \"and\") -> \"1, 2 and 3\" join_list([1,2,3], \"and\", \";\") -> \"1; 2 and 3\" Args: items(array): items to be joined connector(str): connecting word (resource name), like \"and\" or \"or\" sep(str, optional): separator character, default = \",\" Returns: str: the connected list phrase","title":"format"},{"location":"mycroft_lang_utils.format/#module-mycroft_lang_utilsformat","text":"","title":"Module mycroft_lang_utils.format"},{"location":"mycroft_lang_utils.format/#nice95date","text":"def nice_date(dt, lang=None, now=None) Format a datetime to a pronounceable date For example, generates 'tuesday, june the fifth, 2018' Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided now (datetime): Current date. If provided, the returned date for speech will be shortened accordingly: No year is returned if now is in the same year as td, no month is returned if now is in the same month as td. If now and td is the same day, 'today' is returned. Returns: (str): The formatted date string","title":"nice_date"},{"location":"mycroft_lang_utils.format/#nice95date95time","text":"def nice_date_time(dt, lang=None, now=None, use_24hour=False, use_ampm=False) Format a datetime to a pronounceable date and time For example, generate 'tuesday, june the fifth, 2018 at five thirty' Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided now (datetime): Current date. If provided, the returned date for speech will be shortened accordingly: No year is returned if now is in the same year as td, no month is returned if now is in the same month as td. If now and td is the same day, 'today' is returned. use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted date time string","title":"nice_date_time"},{"location":"mycroft_lang_utils.format/#nice95duration","text":"def nice_duration(duration, lang=None, speech=True) Convert duration in seconds to a nice spoken timespan Examples: duration = 60 -> \"1:00\" or \"one minute\" duration = 163 -> \"2:43\" or \"two minutes forty three seconds\" Args: duration: time, in seconds lang (str, optional): a BCP-47 language code, None for default speech (bool): format for speech (True) or display (False) Returns: str: timespan as a string","title":"nice_duration"},{"location":"mycroft_lang_utils.format/#nice95number","text":"def nice_number(number, lang=None, speech=True, denominators=None) Format a float to human readable functions This function formats a float to human understandable functions. Like 4.5 becomes 4 and a half for speech and 4 1/2 for text Args: number (int or float): the float to format lang (str): code for the language to use speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number"},{"location":"mycroft_lang_utils.format/#nice95time","text":"def nice_time(dt, lang=None, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) lang (str): code for the language to use speech (bool): format for speech (default/True) or display (False) use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time"},{"location":"mycroft_lang_utils.format/#nice95year","text":"def nice_year(dt, lang=None, bc=False) Format a datetime to a pronounceable year For example, generate 'nineteen-hundred and eighty-four' for year 1984 Args: dt (datetime): date to format (assumes already in local timezone) lang (string): the language to use, use Mycroft default language if not provided bc (bool) pust B.C. after the year (python does not support dates B.C. in datetime) Returns: (str): The formatted year string","title":"nice_year"},{"location":"mycroft_lang_utils.format/#pronounce95number","text":"def pronounce_number(number, lang=None, places=2, short_scale=True, scientific=False) Convert a number to it's spoken equivalent For example, '5' would be 'five' Args: number: the number to pronounce short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool) : convert and pronounce in scientific notation Returns: (str): The pronounced number","title":"pronounce_number"},{"location":"mycroft_lang_utils.format/#expand95options","text":"def expand_options(parentheses_line:str) -> list Convert 'test (a|b)' -> ['test a', 'test b'] Args: parentheses_line: Input line to expand Returns: List of expanded possibilities","title":"expand_options"},{"location":"mycroft_lang_utils.format/#expand95parentheses","text":"def expand_parentheses(sent) ['1', '(', '2', '|', '3, ')'] -> [['1', '2'], ['1', '3']] For example: Will it (rain|pour) (today|tomorrow|)? ----> Will it rain today? Will it rain tomorrow? Will it rain? Will it pour today? Will it pour tomorrow? Will it pour? Args: sent (list<str>): List of tokens in sentence Returns: list<list<str>>: Multiple possible sentences from original","title":"expand_parentheses"},{"location":"mycroft_lang_utils.format/#join95list","text":"def join_list(items, connector, sep=None, lang=None) Join a list into a phrase using the given connector word Examples: join_list([1,2,3], \"and\") -> \"1, 2 and 3\" join_list([1,2,3], \"and\", \";\") -> \"1; 2 and 3\" Args: items(array): items to be joined connector(str): connecting word (resource name), like \"and\" or \"or\" sep(str, optional): separator character, default = \",\" Returns: str: the connected list phrase","title":"join_list"},{"location":"mycroft_lang_utils.lang.common_data_en/","text":"Module mycroft_lang_utils.lang.common_data_en","title":"Mycroft lang utils.lang.common data en"},{"location":"mycroft_lang_utils.lang.common_data_en/#module-mycroft_lang_utilslangcommon_data_en","text":"","title":"Module mycroft_lang_utils.lang.common_data_en"},{"location":"mycroft_lang_utils.lang.common_data_es/","text":"Module mycroft_lang_utils.lang.common_data_es","title":"Mycroft lang utils.lang.common data es"},{"location":"mycroft_lang_utils.lang.common_data_es/#module-mycroft_lang_utilslangcommon_data_es","text":"","title":"Module mycroft_lang_utils.lang.common_data_es"},{"location":"mycroft_lang_utils.lang.common_data_pt/","text":"Module mycroft_lang_utils.lang.common_data_pt","title":"Mycroft lang utils.lang.common data pt"},{"location":"mycroft_lang_utils.lang.common_data_pt/#module-mycroft_lang_utilslangcommon_data_pt","text":"","title":"Module mycroft_lang_utils.lang.common_data_pt"},{"location":"mycroft_lang_utils.lang.format_common/","text":"Module mycroft_lang_utils.lang.format_common convert_to_mixed_fraction def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"format_common"},{"location":"mycroft_lang_utils.lang.format_common/#module-mycroft_lang_utilslangformat_common","text":"","title":"Module mycroft_lang_utils.lang.format_common"},{"location":"mycroft_lang_utils.lang.format_common/#convert95to95mixed95fraction","text":"def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"convert_to_mixed_fraction"},{"location":"mycroft_lang_utils.lang.format_da/","text":"Module mycroft_lang_utils.lang.format_da nice_number_da def nice_number_da(number, speech, denominators) Danish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_ordinal_da def nice_ordinal_da(text) nice_response_da def nice_response_da(text) nice_time_da def nice_time_da(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_da def pronounce_number_da(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number pronounce_ordinal_da def pronounce_ordinal_da(num)","title":"format_da"},{"location":"mycroft_lang_utils.lang.format_da/#module-mycroft_lang_utilslangformat_da","text":"","title":"Module mycroft_lang_utils.lang.format_da"},{"location":"mycroft_lang_utils.lang.format_da/#nice95number95da","text":"def nice_number_da(number, speech, denominators) Danish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_da"},{"location":"mycroft_lang_utils.lang.format_da/#nice95ordinal95da","text":"def nice_ordinal_da(text)","title":"nice_ordinal_da"},{"location":"mycroft_lang_utils.lang.format_da/#nice95response95da","text":"def nice_response_da(text)","title":"nice_response_da"},{"location":"mycroft_lang_utils.lang.format_da/#nice95time95da","text":"def nice_time_da(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_da"},{"location":"mycroft_lang_utils.lang.format_da/#pronounce95number95da","text":"def pronounce_number_da(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_da"},{"location":"mycroft_lang_utils.lang.format_da/#pronounce95ordinal95da","text":"def pronounce_ordinal_da(num)","title":"pronounce_ordinal_da"},{"location":"mycroft_lang_utils.lang.format_de/","text":"Module mycroft_lang_utils.lang.format_de nice_number_de def nice_number_de(number, speech, denominators) German helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_ordinal_de def nice_ordinal_de(text) nice_response_de def nice_response_de(text) nice_time_de def nice_time_de(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_de def pronounce_number_de(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number pronounce_ordinal_de def pronounce_ordinal_de(num)","title":"format_de"},{"location":"mycroft_lang_utils.lang.format_de/#module-mycroft_lang_utilslangformat_de","text":"","title":"Module mycroft_lang_utils.lang.format_de"},{"location":"mycroft_lang_utils.lang.format_de/#nice95number95de","text":"def nice_number_de(number, speech, denominators) German helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_de"},{"location":"mycroft_lang_utils.lang.format_de/#nice95ordinal95de","text":"def nice_ordinal_de(text)","title":"nice_ordinal_de"},{"location":"mycroft_lang_utils.lang.format_de/#nice95response95de","text":"def nice_response_de(text)","title":"nice_response_de"},{"location":"mycroft_lang_utils.lang.format_de/#nice95time95de","text":"def nice_time_de(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_de"},{"location":"mycroft_lang_utils.lang.format_de/#pronounce95number95de","text":"def pronounce_number_de(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_de"},{"location":"mycroft_lang_utils.lang.format_de/#pronounce95ordinal95de","text":"def pronounce_ordinal_de(num)","title":"pronounce_ordinal_de"},{"location":"mycroft_lang_utils.lang.format_en/","text":"Module mycroft_lang_utils.lang.format_en nice_number_en def nice_number_en(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_en def nice_time_en(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_en def pronounce_number_en(num, places=2, short_scale=True, scientific=False) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"format_en"},{"location":"mycroft_lang_utils.lang.format_en/#module-mycroft_lang_utilslangformat_en","text":"","title":"Module mycroft_lang_utils.lang.format_en"},{"location":"mycroft_lang_utils.lang.format_en/#nice95number95en","text":"def nice_number_en(number, speech, denominators) English helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 and a half\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_en"},{"location":"mycroft_lang_utils.lang.format_en/#nice95time95en","text":"def nice_time_en(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_en"},{"location":"mycroft_lang_utils.lang.format_en/#pronounce95number95en","text":"def pronounce_number_en(num, places=2, short_scale=True, scientific=False) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"pronounce_number_en"},{"location":"mycroft_lang_utils.lang.format_es/","text":"Module mycroft_lang_utils.lang.format_es Format functions for castillian (es-es) nice_number_es def nice_number_es(number, speech, denominators) Spanish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 y medio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_es def nice_time_es(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinco treinta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_es def pronounce_number_es(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinco coma dos' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"format_es"},{"location":"mycroft_lang_utils.lang.format_es/#module-mycroft_lang_utilslangformat_es","text":"Format functions for castillian (es-es)","title":"Module mycroft_lang_utils.lang.format_es"},{"location":"mycroft_lang_utils.lang.format_es/#nice95number95es","text":"def nice_number_es(number, speech, denominators) Spanish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 y medio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_es"},{"location":"mycroft_lang_utils.lang.format_es/#nice95time95es","text":"def nice_time_es(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinco treinta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_es"},{"location":"mycroft_lang_utils.lang.format_es/#pronounce95number95es","text":"def pronounce_number_es(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinco coma dos' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_es"},{"location":"mycroft_lang_utils.lang.format_fr/","text":"Module mycroft_lang_utils.lang.format_fr Format functions for french (fr) nice_number_fr def nice_number_fr(number, speech, denominators) French helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 et demi\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_fr def nice_time_fr(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinq heures trente' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_fr def pronounce_number_fr(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinq virgule deux' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"format_fr"},{"location":"mycroft_lang_utils.lang.format_fr/#module-mycroft_lang_utilslangformat_fr","text":"Format functions for french (fr)","title":"Module mycroft_lang_utils.lang.format_fr"},{"location":"mycroft_lang_utils.lang.format_fr/#nice95number95fr","text":"def nice_number_fr(number, speech, denominators) French helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 et demi\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_fr"},{"location":"mycroft_lang_utils.lang.format_fr/#nice95time95fr","text":"def nice_time_fr(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinq heures trente' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_fr"},{"location":"mycroft_lang_utils.lang.format_fr/#pronounce95number95fr","text":"def pronounce_number_fr(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinq virgule deux' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_fr"},{"location":"mycroft_lang_utils.lang.format_hu/","text":"Module mycroft_lang_utils.lang.format_hu nice_number_hu def nice_number_hu(number, speech, denominators) Hungarian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 \u00e9s f\u00e9l\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_hu def nice_time_hu(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_hu def pronounce_number_hu(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return '\u00f6t eg\u00e9sz k\u00e9t tized' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number pronounce_ordinal_hu def pronounce_ordinal_hu(num)","title":"format_hu"},{"location":"mycroft_lang_utils.lang.format_hu/#module-mycroft_lang_utilslangformat_hu","text":"","title":"Module mycroft_lang_utils.lang.format_hu"},{"location":"mycroft_lang_utils.lang.format_hu/#nice95number95hu","text":"def nice_number_hu(number, speech, denominators) Hungarian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 \u00e9s f\u00e9l\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_hu"},{"location":"mycroft_lang_utils.lang.format_hu/#nice95time95hu","text":"def nice_time_hu(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_hu"},{"location":"mycroft_lang_utils.lang.format_hu/#pronounce95number95hu","text":"def pronounce_number_hu(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return '\u00f6t eg\u00e9sz k\u00e9t tized' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_hu"},{"location":"mycroft_lang_utils.lang.format_hu/#pronounce95ordinal95hu","text":"def pronounce_ordinal_hu(num)","title":"pronounce_ordinal_hu"},{"location":"mycroft_lang_utils.lang.format_it/","text":"Module mycroft_lang_utils.lang.format_it nice_number_it def nice_number_it(number, speech, denominators) Italian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e un mezz\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_it def nice_time_it(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format adapted to italian fron en version For example, generate 'cinque e trenta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_it def pronounce_number_it(num, places=2, short_scale=False, scientific=False) Convert a number to it's spoken equivalent adapted to italian fron en version For example, '5.2' would return 'cinque virgola due' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"format_it"},{"location":"mycroft_lang_utils.lang.format_it/#module-mycroft_lang_utilslangformat_it","text":"","title":"Module mycroft_lang_utils.lang.format_it"},{"location":"mycroft_lang_utils.lang.format_it/#nice95number95it","text":"def nice_number_it(number, speech, denominators) Italian helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e un mezz\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_it"},{"location":"mycroft_lang_utils.lang.format_it/#nice95time95it","text":"def nice_time_it(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format adapted to italian fron en version For example, generate 'cinque e trenta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_it"},{"location":"mycroft_lang_utils.lang.format_it/#pronounce95number95it","text":"def pronounce_number_it(num, places=2, short_scale=False, scientific=False) Convert a number to it's spoken equivalent adapted to italian fron en version For example, '5.2' would return 'cinque virgola due' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak short_scale (bool) : use short (True) or long scale (False) https://en.wikipedia.org/wiki/Names_of_large_numbers scientific (bool): pronounce in scientific notation Returns: (str): The pronounced number","title":"pronounce_number_it"},{"location":"mycroft_lang_utils.lang.format_nl/","text":"Module mycroft_lang_utils.lang.format_nl fix_hour def fix_hour(hour) nice_number_nl def nice_number_nl(number, speech, denominators) Dutch helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_ordinal_nl def nice_ordinal_nl(text) nice_part_of_day_nl def nice_part_of_day_nl(dt) nice_response_nl def nice_response_nl(text) nice_time_nl def nice_time_nl(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_nl def pronounce_number_nl(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number pronounce_ordinal_nl def pronounce_ordinal_nl(num)","title":"format_nl"},{"location":"mycroft_lang_utils.lang.format_nl/#module-mycroft_lang_utilslangformat_nl","text":"","title":"Module mycroft_lang_utils.lang.format_nl"},{"location":"mycroft_lang_utils.lang.format_nl/#fix95hour","text":"def fix_hour(hour)","title":"fix_hour"},{"location":"mycroft_lang_utils.lang.format_nl/#nice95number95nl","text":"def nice_number_nl(number, speech, denominators) Dutch helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 einhalb\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_nl"},{"location":"mycroft_lang_utils.lang.format_nl/#nice95ordinal95nl","text":"def nice_ordinal_nl(text)","title":"nice_ordinal_nl"},{"location":"mycroft_lang_utils.lang.format_nl/#nice95part95of95day95nl","text":"def nice_part_of_day_nl(dt)","title":"nice_part_of_day_nl"},{"location":"mycroft_lang_utils.lang.format_nl/#nice95response95nl","text":"def nice_response_nl(text)","title":"nice_response_nl"},{"location":"mycroft_lang_utils.lang.format_nl/#nice95time95nl","text":"def nice_time_nl(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'five thirty' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_nl"},{"location":"mycroft_lang_utils.lang.format_nl/#pronounce95number95nl","text":"def pronounce_number_nl(num, places=2) Convert a number to its spoken equivalent For example, '5.2' would return 'five point two' Args: num(float or int): the number to pronounce (set limit below) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_nl"},{"location":"mycroft_lang_utils.lang.format_nl/#pronounce95ordinal95nl","text":"def pronounce_ordinal_nl(num)","title":"pronounce_ordinal_nl"},{"location":"mycroft_lang_utils.lang.format_pt/","text":"Module mycroft_lang_utils.lang.format_pt nice_number_pt def nice_number_pt(number, speech, denominators) Portuguese helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e meio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string. nice_time_pt def nice_time_pt(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinco treinta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string pronounce_number_pt def pronounce_number_pt(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinco virgula dois' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"format_pt"},{"location":"mycroft_lang_utils.lang.format_pt/#module-mycroft_lang_utilslangformat_pt","text":"","title":"Module mycroft_lang_utils.lang.format_pt"},{"location":"mycroft_lang_utils.lang.format_pt/#nice95number95pt","text":"def nice_number_pt(number, speech, denominators) Portuguese helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 e meio\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_pt"},{"location":"mycroft_lang_utils.lang.format_pt/#nice95time95pt","text":"def nice_time_pt(dt, speech=True, use_24hour=False, use_ampm=False) Format a time to a comfortable human format For example, generate 'cinco treinta' for speech or '5:30' for text display. Args: dt (datetime): date to format (assumes already in local timezone) speech (bool): format for speech (default/True) or display (False)=Fal use_24hour (bool): output in 24-hour/military or 12-hour format use_ampm (bool): include the am/pm for 12-hour format Returns: (str): The formatted time string","title":"nice_time_pt"},{"location":"mycroft_lang_utils.lang.format_pt/#pronounce95number95pt","text":"def pronounce_number_pt(num, places=2) Convert a number to it's spoken equivalent For example, '5.2' would return 'cinco virgula dois' Args: num(float or int): the number to pronounce (under 100) places(int): maximum decimal places to speak Returns: (str): The pronounced number","title":"pronounce_number_pt"},{"location":"mycroft_lang_utils.lang.format_sv/","text":"Module mycroft_lang_utils.lang.format_sv nice_number_sv def nice_number_sv(number, speech, denominators) Swedish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 och en halv\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"format_sv"},{"location":"mycroft_lang_utils.lang.format_sv/#module-mycroft_lang_utilslangformat_sv","text":"","title":"Module mycroft_lang_utils.lang.format_sv"},{"location":"mycroft_lang_utils.lang.format_sv/#nice95number95sv","text":"def nice_number_sv(number, speech, denominators) Swedish helper for nice_number This function formats a float to human understandable functions. Like 4.5 becomes \"4 och en halv\" for speech and \"4 1/2\" for text Args: number (int or float): the float to format speech (bool): format for speech (True) or display (False) denominators (iter of ints): denominators to use, default [1 .. 20] Returns: (str): The formatted string.","title":"nice_number_sv"},{"location":"mycroft_lang_utils.lang/","text":"Module mycroft_lang_utils.lang get_active_lang def get_active_lang() Get the active full language code (BCP-47) Returns: str: A BCP-47 language code, e.g. (\"en-us\", or \"pt-pt\") get_full_lang_code def get_full_lang_code(lang=None) Get the full language code Args: lang (str, optional): A BCP-47 language code, or None for default Returns: str: A full language code, such as \"en-us\" or \"de-de\" get_primary_lang_code def get_primary_lang_code(lang=None) Get the primary language code Args: lang (str, optional): A BCP-47 language code, or None for default Returns: str: A primary language family, such as \"en\", \"de\" or \"pt\" set_active_lang def set_active_lang(lang_code) Set the active BCP-47 language code to be used in formatting/parsing Args: lang (str): BCP-47 language code, e.g. \"en-us\" or \"es-mx\" Module mycroft_lang_utils.lang.format_common convert_to_mixed_fraction def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction Module mycroft_lang_utils.lang.parse_common extract_numbers_generic def extract_numbers_generic(text, pronounce_handler, extract_handler, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Language agnostic, per language parsers need to be provided Args: text (str): the string to extract a number from pronounce_handler (function): function that pronounces a number extract_handler (function): function that extracts the last number present in a string short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats is_numeric def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False look_for_fractions def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"lang"},{"location":"mycroft_lang_utils.lang/#module-mycroft_lang_utilslang","text":"","title":"Module mycroft_lang_utils.lang"},{"location":"mycroft_lang_utils.lang/#get95active95lang","text":"def get_active_lang() Get the active full language code (BCP-47) Returns: str: A BCP-47 language code, e.g. (\"en-us\", or \"pt-pt\")","title":"get_active_lang"},{"location":"mycroft_lang_utils.lang/#get95full95lang95code","text":"def get_full_lang_code(lang=None) Get the full language code Args: lang (str, optional): A BCP-47 language code, or None for default Returns: str: A full language code, such as \"en-us\" or \"de-de\"","title":"get_full_lang_code"},{"location":"mycroft_lang_utils.lang/#get95primary95lang95code","text":"def get_primary_lang_code(lang=None) Get the primary language code Args: lang (str, optional): A BCP-47 language code, or None for default Returns: str: A primary language family, such as \"en\", \"de\" or \"pt\"","title":"get_primary_lang_code"},{"location":"mycroft_lang_utils.lang/#set95active95lang","text":"def set_active_lang(lang_code) Set the active BCP-47 language code to be used in formatting/parsing Args: lang (str): BCP-47 language code, e.g. \"en-us\" or \"es-mx\"","title":"set_active_lang"},{"location":"mycroft_lang_utils.lang/#module-mycroft_lang_utilslangformat_common","text":"","title":"Module mycroft_lang_utils.lang.format_common"},{"location":"mycroft_lang_utils.lang/#convert95to95mixed95fraction","text":"def convert_to_mixed_fraction(number, denominators) Convert floats to components of a mixed fraction representation Returns the closest fractional representation using the provided denominators. For example, 4.500002 would become the whole number 4, the numerator 1 and the denominator 2 Args: number (float): number for convert denominators (iter of ints): denominators to use, default [1 .. 20] Returns: whole, numerator, denominator (int): Integers of the mixed fraction","title":"convert_to_mixed_fraction"},{"location":"mycroft_lang_utils.lang/#module-mycroft_lang_utilslangparse_common","text":"","title":"Module mycroft_lang_utils.lang.parse_common"},{"location":"mycroft_lang_utils.lang/#extract95numbers95generic","text":"def extract_numbers_generic(text, pronounce_handler, extract_handler, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Language agnostic, per language parsers need to be provided Args: text (str): the string to extract a number from pronounce_handler (function): function that pronounces a number extract_handler (function): function that extracts the last number present in a string short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats","title":"extract_numbers_generic"},{"location":"mycroft_lang_utils.lang/#is95numeric","text":"def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False","title":"is_numeric"},{"location":"mycroft_lang_utils.lang/#look95for95fractions","text":"def look_for_fractions(split_list) \" This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"look_for_fractions"},{"location":"mycroft_lang_utils.lang.parse_common/","text":"Module mycroft_lang_utils.lang.parse_common extract_numbers_generic def extract_numbers_generic(text, pronounce_handler, extract_handler, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Language agnostic, per language parsers need to be provided Args: text (str): the string to extract a number from pronounce_handler (function): function that pronounces a number extract_handler (function): function that extracts the last number present in a string short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats is_numeric def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False look_for_fractions def look_for_fractions(split_list) This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"parse_common"},{"location":"mycroft_lang_utils.lang.parse_common/#module-mycroft_lang_utilslangparse_common","text":"","title":"Module mycroft_lang_utils.lang.parse_common"},{"location":"mycroft_lang_utils.lang.parse_common/#extract95numbers95generic","text":"def extract_numbers_generic(text, pronounce_handler, extract_handler, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Language agnostic, per language parsers need to be provided Args: text (str): the string to extract a number from pronounce_handler (function): function that pronounces a number extract_handler (function): function that extracts the last number present in a string short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats","title":"extract_numbers_generic"},{"location":"mycroft_lang_utils.lang.parse_common/#is95numeric","text":"def is_numeric(input_str) Takes in a string and tests to see if it is a number. Args: text (str): string to test if a number Returns: (bool): True if a number, else False","title":"is_numeric"},{"location":"mycroft_lang_utils.lang.parse_common/#look95for95fractions","text":"def look_for_fractions(split_list) This function takes a list made by fraction & determines if a fraction. Args: split_list (list): list created by splitting on '/' Returns: (bool): False if not a fraction, otherwise True","title":"look_for_fractions"},{"location":"mycroft_lang_utils.lang.parse_da/","text":"Module mycroft_lang_utils.lang.parse_da extract_datetime_da def extract_datetime_da(string, currentDate, default_time) extract_numbers_da def extract_numbers_da(text, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats extractnumber_da def extractnumber_da(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse' isFractional_da def isFractional_da(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction isOrdinal_da def isOrdinal_da(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in da_numbers normalize_da def normalize_da(text, remove_articles) German string normalization","title":"parse_da"},{"location":"mycroft_lang_utils.lang.parse_da/#module-mycroft_lang_utilslangparse_da","text":"","title":"Module mycroft_lang_utils.lang.parse_da"},{"location":"mycroft_lang_utils.lang.parse_da/#extract95datetime95da","text":"def extract_datetime_da(string, currentDate, default_time)","title":"extract_datetime_da"},{"location":"mycroft_lang_utils.lang.parse_da/#extract95numbers95da","text":"def extract_numbers_da(text, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats","title":"extract_numbers_da"},{"location":"mycroft_lang_utils.lang.parse_da/#extractnumber95da","text":"def extractnumber_da(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse'","title":"extractnumber_da"},{"location":"mycroft_lang_utils.lang.parse_da/#isfractional95da","text":"def isFractional_da(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_da"},{"location":"mycroft_lang_utils.lang.parse_da/#isordinal95da","text":"def isOrdinal_da(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in da_numbers","title":"isOrdinal_da"},{"location":"mycroft_lang_utils.lang.parse_da/#normalize95da","text":"def normalize_da(text, remove_articles) German string normalization","title":"normalize_da"},{"location":"mycroft_lang_utils.lang.parse_de/","text":"Module mycroft_lang_utils.lang.parse_de extract_datetime_de def extract_datetime_de(string, currentDate, default_time) extract_numbers_de def extract_numbers_de(text, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats extractnumber_de def extractnumber_de(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse' isFractional_de def isFractional_de(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction isOrdinal_de def isOrdinal_de(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in de_numbers normalize_de def normalize_de(text, remove_articles) German string normalization","title":"parse_de"},{"location":"mycroft_lang_utils.lang.parse_de/#module-mycroft_lang_utilslangparse_de","text":"","title":"Module mycroft_lang_utils.lang.parse_de"},{"location":"mycroft_lang_utils.lang.parse_de/#extract95datetime95de","text":"def extract_datetime_de(string, currentDate, default_time)","title":"extract_datetime_de"},{"location":"mycroft_lang_utils.lang.parse_de/#extract95numbers95de","text":"def extract_numbers_de(text, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats","title":"extract_numbers_de"},{"location":"mycroft_lang_utils.lang.parse_de/#extractnumber95de","text":"def extractnumber_de(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number undefined articles cannot be suppressed in German: 'ein Pferd' means 'one horse' and 'a horse'","title":"extractnumber_de"},{"location":"mycroft_lang_utils.lang.parse_de/#isfractional95de","text":"def isFractional_de(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_de"},{"location":"mycroft_lang_utils.lang.parse_de/#isordinal95de","text":"def isOrdinal_de(input_str) This function takes the given text and checks if it is an ordinal number. Args: input_str (str): the string to check if ordinal Returns: (bool) or (float): False if not an ordinal, otherwise the number corresponding to the ordinal ordinals for 1, 3, 7 and 8 are irregular only works for ordinals corresponding to the numbers in de_numbers","title":"isOrdinal_de"},{"location":"mycroft_lang_utils.lang.parse_de/#normalize95de","text":"def normalize_de(text, remove_articles) German string normalization","title":"normalize_de"},{"location":"mycroft_lang_utils.lang.parse_en/","text":"Module mycroft_lang_utils.lang.parse_en extract_datetime_en def extract_datetime_en(string, dateNow, default_time) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words dateNow (datetime): A reference date/time for \"tommorrow\", etc default_time (time): Time to set if no time was found in the string Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing, or None if no date or time related text was found. extract_duration_en def extract_duration_en(text) Convert an english phrase into a number of seconds Convert things like: \"10 minute\" \"2 and a half hours\" \"3 days 8 hours 10 minutes and 49 seconds\" into an int, representing the total number of seconds. The words used in the duration will be consumed, and the remainder returned. As an example, \"set a timer for 5 minutes\" would return (300, \"set a timer for\"). Args: text (str): string containing a duration Returns: (timedelta, str): A tuple containing the duration and the remaining text not consumed in the parsing. The first value will be None if no duration is found. The text returned will have whitespace stripped from the ends. extract_numbers_en def extract_numbers_en(text, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats extractnumber_en def extractnumber_en(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found isFractional_en def isFractional_en(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_en def normalize_en(text, remove_articles) English string normalization","title":"parse_en"},{"location":"mycroft_lang_utils.lang.parse_en/#module-mycroft_lang_utilslangparse_en","text":"","title":"Module mycroft_lang_utils.lang.parse_en"},{"location":"mycroft_lang_utils.lang.parse_en/#extract95datetime95en","text":"def extract_datetime_en(string, dateNow, default_time) Convert a human date reference into an exact datetime Convert things like \"today\" \"tomorrow afternoon\" \"next Tuesday at 4pm\" \"August 3rd\" into a datetime. If a reference date is not provided, the current local time is used. Also consumes the words used to define the date returning the remaining string. For example, the string \"what is Tuesday's weather forecast\" returns the date for the forthcoming Tuesday relative to the reference date and the remainder string \"what is weather forecast\". Args: string (str): string containing date words dateNow (datetime): A reference date/time for \"tommorrow\", etc default_time (time): Time to set if no time was found in the string Returns: [datetime, str]: An array containing the datetime and the remaining text not consumed in the parsing, or None if no date or time related text was found.","title":"extract_datetime_en"},{"location":"mycroft_lang_utils.lang.parse_en/#extract95duration95en","text":"def extract_duration_en(text) Convert an english phrase into a number of seconds Convert things like: \"10 minute\" \"2 and a half hours\" \"3 days 8 hours 10 minutes and 49 seconds\" into an int, representing the total number of seconds. The words used in the duration will be consumed, and the remainder returned. As an example, \"set a timer for 5 minutes\" would return (300, \"set a timer for\"). Args: text (str): string containing a duration Returns: (timedelta, str): A tuple containing the duration and the remaining text not consumed in the parsing. The first value will be None if no duration is found. The text returned will have whitespace stripped from the ends.","title":"extract_duration_en"},{"location":"mycroft_lang_utils.lang.parse_en/#extract95numbers95en","text":"def extract_numbers_en(text, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats","title":"extract_numbers_en"},{"location":"mycroft_lang_utils.lang.parse_en/#extractnumber95en","text":"def extractnumber_en(text, short_scale=True, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found","title":"extractnumber_en"},{"location":"mycroft_lang_utils.lang.parse_en/#isfractional95en","text":"def isFractional_en(input_str, short_scale=True) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_en"},{"location":"mycroft_lang_utils.lang.parse_en/#normalize95en","text":"def normalize_en(text, remove_articles) English string normalization","title":"normalize_en"},{"location":"mycroft_lang_utils.lang.parse_es/","text":"Module mycroft_lang_utils.lang.parse_es Parse functions for spanish (es) TODO: numbers greater than 999999 es_number_parse def es_number_parse(words, i) extract_datetime_es def extract_datetime_es(input_str, currentDate=None, default_time=None) extractnumber_es def extractnumber_es(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number get_gender_es def get_gender_es(word, raw_string='') isFractional_es def isFractional_es(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_es def normalize_es(text, remove_articles) Spanish string normalization","title":"parse_es"},{"location":"mycroft_lang_utils.lang.parse_es/#module-mycroft_lang_utilslangparse_es","text":"Parse functions for spanish (es) TODO: numbers greater than 999999","title":"Module mycroft_lang_utils.lang.parse_es"},{"location":"mycroft_lang_utils.lang.parse_es/#es95number95parse","text":"def es_number_parse(words, i)","title":"es_number_parse"},{"location":"mycroft_lang_utils.lang.parse_es/#extract95datetime95es","text":"def extract_datetime_es(input_str, currentDate=None, default_time=None)","title":"extract_datetime_es"},{"location":"mycroft_lang_utils.lang.parse_es/#extractnumber95es","text":"def extractnumber_es(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"extractnumber_es"},{"location":"mycroft_lang_utils.lang.parse_es/#get95gender95es","text":"def get_gender_es(word, raw_string='')","title":"get_gender_es"},{"location":"mycroft_lang_utils.lang.parse_es/#isfractional95es","text":"def isFractional_es(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_es"},{"location":"mycroft_lang_utils.lang.parse_es/#normalize95es","text":"def normalize_es(text, remove_articles) Spanish string normalization","title":"normalize_es"},{"location":"mycroft_lang_utils.lang.parse_fr/","text":"Module mycroft_lang_utils.lang.parse_fr Parse functions for french (fr) Todo: * extractnumber_fr: ordinal numbers (\"cinqui\u00e8me\") * extractnumber_fr: numbers greater than 999 999 (\"cinq millions\") * extract_datetime_fr: \"quatri\u00e8me lundi de janvier\" * get_gender_fr extract_datetime_fr def extract_datetime_fr(string, currentDate, default_time) extract_numbers_fr def extract_numbers_fr(text, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats extractnumber_fr def extractnumber_fr(text) Takes in a string and extracts a number. Args: text (str): the string to extract a number from Returns: (str): The number extracted or the original text. getOrdinal_fr def getOrdinal_fr(word) Get the ordinal number Takes in a word (string without whitespace) and extracts the ordinal number. Args: word (string): the word to extract the number from Returns: number (int) Returns None if no ordinal number was found. isFractional_fr def isFractional_fr(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_fr def normalize_fr(text, remove_articles) French string normalization number_ordinal_fr def number_ordinal_fr(words, i) Find an ordinal number in a list of words Takes in a list of words (strings without whitespace) and extracts an ordinal number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the ordinal number Returns: tuple with ordinal number (str), index of next word after the number (int). Returns None if no ordinal number was found. number_parse_fr def number_parse_fr(words, i) Parses a list of words to find a number Takes in a list of words (strings without whitespace) and extracts a number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the number Returns: tuple with number, index of next word after the number. Returns None if no number was found.","title":"parse_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#module-mycroft_lang_utilslangparse_fr","text":"Parse functions for french (fr) Todo: * extractnumber_fr: ordinal numbers (\"cinqui\u00e8me\") * extractnumber_fr: numbers greater than 999 999 (\"cinq millions\") * extract_datetime_fr: \"quatri\u00e8me lundi de janvier\" * get_gender_fr","title":"Module mycroft_lang_utils.lang.parse_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#extract95datetime95fr","text":"def extract_datetime_fr(string, currentDate, default_time)","title":"extract_datetime_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#extract95numbers95fr","text":"def extract_numbers_fr(text, short_scale=True, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats","title":"extract_numbers_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#extractnumber95fr","text":"def extractnumber_fr(text) Takes in a string and extracts a number. Args: text (str): the string to extract a number from Returns: (str): The number extracted or the original text.","title":"extractnumber_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#getordinal95fr","text":"def getOrdinal_fr(word) Get the ordinal number Takes in a word (string without whitespace) and extracts the ordinal number. Args: word (string): the word to extract the number from Returns: number (int) Returns None if no ordinal number was found.","title":"getOrdinal_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#isfractional95fr","text":"def isFractional_fr(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#normalize95fr","text":"def normalize_fr(text, remove_articles) French string normalization","title":"normalize_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#number95ordinal95fr","text":"def number_ordinal_fr(words, i) Find an ordinal number in a list of words Takes in a list of words (strings without whitespace) and extracts an ordinal number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the ordinal number Returns: tuple with ordinal number (str), index of next word after the number (int). Returns None if no ordinal number was found.","title":"number_ordinal_fr"},{"location":"mycroft_lang_utils.lang.parse_fr/#number95parse95fr","text":"def number_parse_fr(words, i) Parses a list of words to find a number Takes in a list of words (strings without whitespace) and extracts a number that starts at the given index. Args: words (array): the list to extract a number from i (int): the index in words where to look for the number Returns: tuple with number, index of next word after the number. Returns None if no number was found.","title":"number_parse_fr"},{"location":"mycroft_lang_utils.lang.parse_it/","text":"Module mycroft_lang_utils.lang.parse_it Parse functions for Italian (IT-IT) extract_datetime_it def extract_datetime_it(string, dateNow, default_time) extract_numbers_it def extract_numbers_it(text, short_scale=False, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats extractnumber_it def extractnumber_it(text, short_scale=False, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found extractnumber_long_it def extractnumber_long_it(word) This function converts a long textual number like milleventisette -> 1027 diecimila -> 10041 in integer value, covers from 0 to 999999999999999 for now limited to 999_e21 but ready for 999_e63 example: milleventisette -> 1027 diecimilaquarantuno-> 10041 centottomiladuecentotredici -> 108213 Args: word (str): the word to convert in number Returns: (bool) or (int): The extracted number or False if no number was found get_gender_it def get_gender_it(word, raw_string='') In Italian to define the grammatical gender of a word is necessary analyze the article that precedes the word and not only the last letter of the word. TODO: check if useful isFractional_it def isFractional_it(input_str, short_scale=False) This function takes the given text and checks if it is a fraction. Updated to italian from en version 18.8.9 Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_it def normalize_it(text, remove_articles) IT string normalization","title":"parse_it"},{"location":"mycroft_lang_utils.lang.parse_it/#module-mycroft_lang_utilslangparse_it","text":"Parse functions for Italian (IT-IT)","title":"Module mycroft_lang_utils.lang.parse_it"},{"location":"mycroft_lang_utils.lang.parse_it/#extract95datetime95it","text":"def extract_datetime_it(string, dateNow, default_time)","title":"extract_datetime_it"},{"location":"mycroft_lang_utils.lang.parse_it/#extract95numbers95it","text":"def extract_numbers_it(text, short_scale=False, ordinals=False) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 Returns: list: list of extracted numbers as floats","title":"extract_numbers_it"},{"location":"mycroft_lang_utils.lang.parse_it/#extractnumber95it","text":"def extractnumber_it(text, short_scale=False, ordinals=False) This function extracts a number from a text string, handles pronunciations in long scale and short scale https://en.wikipedia.org/wiki/Names_of_large_numbers Args: text (str): the string to normalize short_scale (bool): use short scale if True, long scale if False ordinals (bool): consider ordinal numbers, third=3 instead of 1/3 Returns: (int) or (float) or False: The extracted number or False if no number was found","title":"extractnumber_it"},{"location":"mycroft_lang_utils.lang.parse_it/#extractnumber95long95it","text":"def extractnumber_long_it(word) This function converts a long textual number like milleventisette -> 1027 diecimila -> 10041 in integer value, covers from 0 to 999999999999999 for now limited to 999_e21 but ready for 999_e63 example: milleventisette -> 1027 diecimilaquarantuno-> 10041 centottomiladuecentotredici -> 108213 Args: word (str): the word to convert in number Returns: (bool) or (int): The extracted number or False if no number was found","title":"extractnumber_long_it"},{"location":"mycroft_lang_utils.lang.parse_it/#get95gender95it","text":"def get_gender_it(word, raw_string='') In Italian to define the grammatical gender of a word is necessary analyze the article that precedes the word and not only the last letter of the word. TODO: check if useful","title":"get_gender_it"},{"location":"mycroft_lang_utils.lang.parse_it/#isfractional95it","text":"def isFractional_it(input_str, short_scale=False) This function takes the given text and checks if it is a fraction. Updated to italian from en version 18.8.9 Args: input_str (str): the string to check if fractional short_scale (bool): use short scale if True, long scale if False Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_it"},{"location":"mycroft_lang_utils.lang.parse_it/#normalize95it","text":"def normalize_it(text, remove_articles) IT string normalization","title":"normalize_it"},{"location":"mycroft_lang_utils.lang.parse_pt/","text":"Module mycroft_lang_utils.lang.parse_pt Parse functions for Portuguese (PT-PT) TODO: numbers greater than 999999 TODO: date time pt extract_datetime_pt def extract_datetime_pt(input_str, currentDate, default_time) extractnumber_pt def extractnumber_pt(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number get_gender_pt def get_gender_pt(word, raw_string='') isFractional_pt def isFractional_pt(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_pt def normalize_pt(text, remove_articles) PT string normalization pt_number_parse def pt_number_parse(words, i) pt_pruning def pt_pruning(text, symbols=True, accents=True, agressive=True)","title":"parse_pt"},{"location":"mycroft_lang_utils.lang.parse_pt/#module-mycroft_lang_utilslangparse_pt","text":"Parse functions for Portuguese (PT-PT) TODO: numbers greater than 999999 TODO: date time pt","title":"Module mycroft_lang_utils.lang.parse_pt"},{"location":"mycroft_lang_utils.lang.parse_pt/#extract95datetime95pt","text":"def extract_datetime_pt(input_str, currentDate, default_time)","title":"extract_datetime_pt"},{"location":"mycroft_lang_utils.lang.parse_pt/#extractnumber95pt","text":"def extractnumber_pt(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"extractnumber_pt"},{"location":"mycroft_lang_utils.lang.parse_pt/#get95gender95pt","text":"def get_gender_pt(word, raw_string='')","title":"get_gender_pt"},{"location":"mycroft_lang_utils.lang.parse_pt/#isfractional95pt","text":"def isFractional_pt(input_str) This function takes the given text and checks if it is a fraction. Args: text (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"isFractional_pt"},{"location":"mycroft_lang_utils.lang.parse_pt/#normalize95pt","text":"def normalize_pt(text, remove_articles) PT string normalization","title":"normalize_pt"},{"location":"mycroft_lang_utils.lang.parse_pt/#pt95number95parse","text":"def pt_number_parse(words, i)","title":"pt_number_parse"},{"location":"mycroft_lang_utils.lang.parse_pt/#pt95pruning","text":"def pt_pruning(text, symbols=True, accents=True, agressive=True)","title":"pt_pruning"},{"location":"mycroft_lang_utils.lang.parse_sv/","text":"Module mycroft_lang_utils.lang.parse_sv extract_datetime_sv def extract_datetime_sv(string, currentDate, default_time) extractnumber_sv def extractnumber_sv(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number is_fractional_sv def is_fractional_sv(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction normalize_sv def normalize_sv(text, remove_articles) English string normalization","title":"parse_sv"},{"location":"mycroft_lang_utils.lang.parse_sv/#module-mycroft_lang_utilslangparse_sv","text":"","title":"Module mycroft_lang_utils.lang.parse_sv"},{"location":"mycroft_lang_utils.lang.parse_sv/#extract95datetime95sv","text":"def extract_datetime_sv(string, currentDate, default_time)","title":"extract_datetime_sv"},{"location":"mycroft_lang_utils.lang.parse_sv/#extractnumber95sv","text":"def extractnumber_sv(text) This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize Returns: (int) or (float): The value of extracted number","title":"extractnumber_sv"},{"location":"mycroft_lang_utils.lang.parse_sv/#is95fractional95sv","text":"def is_fractional_sv(input_str) This function takes the given text and checks if it is a fraction. Args: input_str (str): the string to check if fractional Returns: (bool) or (float): False if not a fraction, otherwise the fraction","title":"is_fractional_sv"},{"location":"mycroft_lang_utils.lang.parse_sv/#normalize95sv","text":"def normalize_sv(text, remove_articles) English string normalization","title":"normalize_sv"},{"location":"mycroft_lang_utils.parse/","text":"Module mycroft_lang_utils.parse extract_datetime def extract_datetime(text, anchorDate=None, lang=None, default_time=None) Extracts date and time information from a sentence. Parses many of the common ways that humans express dates and times, including relative dates like \"5 days from today\", \"tomorrow', and \"Tuesday\". Vague terminology are given arbitrary values, like: - morning = 8 AM - afternoon = 3 PM - evening = 7 PM If a time isn't supplied or implied, the function defaults to 12 AM Args: text (str): the text to be interpreted anchorDate (:obj:`datetime`, optional): the date to be used for relative dating (for example, what does \"tomorrow\" mean?). Defaults to the current local date/time. lang (str): the BCP-47 code for the language to use, None uses default default_time (datetime.time): time to use if none was found in the input string. Returns: [:obj:`datetime`, :obj:`str`]: 'datetime' is the extracted date as a datetime object in the user's local timezone. 'leftover_string' is the original phrase with all date and time related keywords stripped out. See examples for further clarification Returns 'None' if no date or time related text is found. Examples: >>> extract_datetime( ... \"What is the weather like the day after tomorrow?\", ... datetime(2017, 06, 30, 00, 00) ... ) [datetime.datetime(2017, 7, 2, 0, 0), 'what is weather like'] >>> extract_datetime( ... \"Set up an appointment 2 weeks from Sunday at 5 pm\", ... datetime(2016, 02, 19, 00, 00) ... ) [datetime.datetime(2016, 3, 6, 17, 0), 'set up appointment'] >>> extract_datetime( ... \"Set up an appointment\", ... datetime(2016, 02, 19, 00, 00) ... ) None extract_duration def extract_duration(text, lang=None) Convert an english phrase into a number of seconds Convert things like: \"10 minute\" \"2 and a half hours\" \"3 days 8 hours 10 minutes and 49 seconds\" into an int, representing the total number of seconds. The words used in the duration will be consumed, and the remainder returned. As an example, \"set a timer for 5 minutes\" would return (300, \"set a timer for\"). Args: text (str): string containing a duration lang (str): the BCP-47 code for the language to use, None uses default Returns: (timedelta, str): A tuple containing the duration and the remaining text not consumed in the parsing. The first value will be None if no duration is found. The text returned will have whitespace stripped from the ends. extract_number def extract_number(text, short_scale=True, ordinals=False, lang=None) Takes in a string and extracts a number. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 lang (str): the BCP-47 code for the language to use, None uses default Returns: (int, float or False): The number extracted or False if the input text contains no numbers extract_numbers def extract_numbers(text, short_scale=True, ordinals=False, lang=None) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 lang (str): the BCP-47 code for the language to use, None uses default Returns: list: list of extracted numbers as floats, or empty list if none found get_gender def get_gender(word, context='', lang=None) Guess the gender of a word Some languages assign genders to specific words. This method will attempt to determine the gender, optionally using the provided context sentence. Args: word (str): The word to look up context (str, optional): String containing word, for context lang (str): the BCP-47 code for the language to use, None uses default Returns: str: The code \"m\" (male), \"f\" (female) or \"n\" (neutral) for the gender, or None if unknown/or unused in the given language. normalize def normalize(text, lang=None, remove_articles=True) Prepare a string for parsing This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize lang (str): the BCP-47 code for the language to use, None uses default remove_articles (bool): whether to remove articles (like 'a', or 'the'). True by default. Returns: (str): The normalized string. match_one def match_one(query, choices) Find best match from a list or dictionary given an input Arguments: query: string to test choices: list or dictionary of choices Returns: tuple with best match, score fuzzy_match def fuzzy_match(x, against) Perform a 'fuzzy' comparison between two strings. Returns: float: match percentage -- 1.0 for perfect match, down to 0.0 for no match at all.","title":"parse"},{"location":"mycroft_lang_utils.parse/#module-mycroft_lang_utilsparse","text":"","title":"Module mycroft_lang_utils.parse"},{"location":"mycroft_lang_utils.parse/#extract95datetime","text":"def extract_datetime(text, anchorDate=None, lang=None, default_time=None) Extracts date and time information from a sentence. Parses many of the common ways that humans express dates and times, including relative dates like \"5 days from today\", \"tomorrow', and \"Tuesday\". Vague terminology are given arbitrary values, like: - morning = 8 AM - afternoon = 3 PM - evening = 7 PM If a time isn't supplied or implied, the function defaults to 12 AM Args: text (str): the text to be interpreted anchorDate (:obj:`datetime`, optional): the date to be used for relative dating (for example, what does \"tomorrow\" mean?). Defaults to the current local date/time. lang (str): the BCP-47 code for the language to use, None uses default default_time (datetime.time): time to use if none was found in the input string. Returns: [:obj:`datetime`, :obj:`str`]: 'datetime' is the extracted date as a datetime object in the user's local timezone. 'leftover_string' is the original phrase with all date and time related keywords stripped out. See examples for further clarification Returns 'None' if no date or time related text is found. Examples: >>> extract_datetime( ... \"What is the weather like the day after tomorrow?\", ... datetime(2017, 06, 30, 00, 00) ... ) [datetime.datetime(2017, 7, 2, 0, 0), 'what is weather like'] >>> extract_datetime( ... \"Set up an appointment 2 weeks from Sunday at 5 pm\", ... datetime(2016, 02, 19, 00, 00) ... ) [datetime.datetime(2016, 3, 6, 17, 0), 'set up appointment'] >>> extract_datetime( ... \"Set up an appointment\", ... datetime(2016, 02, 19, 00, 00) ... ) None","title":"extract_datetime"},{"location":"mycroft_lang_utils.parse/#extract95duration","text":"def extract_duration(text, lang=None) Convert an english phrase into a number of seconds Convert things like: \"10 minute\" \"2 and a half hours\" \"3 days 8 hours 10 minutes and 49 seconds\" into an int, representing the total number of seconds. The words used in the duration will be consumed, and the remainder returned. As an example, \"set a timer for 5 minutes\" would return (300, \"set a timer for\"). Args: text (str): string containing a duration lang (str): the BCP-47 code for the language to use, None uses default Returns: (timedelta, str): A tuple containing the duration and the remaining text not consumed in the parsing. The first value will be None if no duration is found. The text returned will have whitespace stripped from the ends.","title":"extract_duration"},{"location":"mycroft_lang_utils.parse/#extract_number","text":"def extract_number(text, short_scale=True, ordinals=False, lang=None) Takes in a string and extracts a number. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 lang (str): the BCP-47 code for the language to use, None uses default Returns: (int, float or False): The number extracted or False if the input text contains no numbers","title":"extract_number"},{"location":"mycroft_lang_utils.parse/#extract_numbers","text":"def extract_numbers(text, short_scale=True, ordinals=False, lang=None) Takes in a string and extracts a list of numbers. Args: text (str): the string to extract a number from short_scale (bool): Use \"short scale\" or \"long scale\" for large numbers -- over a million. The default is short scale, which is now common in most English speaking countries. See https://en.wikipedia.org/wiki/Names_of_large_numbers ordinals (bool): consider ordinal numbers, e.g. third=3 instead of 1/3 lang (str): the BCP-47 code for the language to use, None uses default Returns: list: list of extracted numbers as floats, or empty list if none found","title":"extract_numbers"},{"location":"mycroft_lang_utils.parse/#get_gender","text":"def get_gender(word, context='', lang=None) Guess the gender of a word Some languages assign genders to specific words. This method will attempt to determine the gender, optionally using the provided context sentence. Args: word (str): The word to look up context (str, optional): String containing word, for context lang (str): the BCP-47 code for the language to use, None uses default Returns: str: The code \"m\" (male), \"f\" (female) or \"n\" (neutral) for the gender, or None if unknown/or unused in the given language.","title":"get_gender"},{"location":"mycroft_lang_utils.parse/#normalize","text":"def normalize(text, lang=None, remove_articles=True) Prepare a string for parsing This function prepares the given text for parsing by making numbers consistent, getting rid of contractions, etc. Args: text (str): the string to normalize lang (str): the BCP-47 code for the language to use, None uses default remove_articles (bool): whether to remove articles (like 'a', or 'the'). True by default. Returns: (str): The normalized string.","title":"normalize"},{"location":"mycroft_lang_utils.parse/#match95one","text":"def match_one(query, choices) Find best match from a list or dictionary given an input Arguments: query: string to test choices: list or dictionary of choices Returns: tuple with best match, score","title":"match_one"},{"location":"mycroft_lang_utils.parse/#fuzzy_match","text":"def fuzzy_match(x, against) Perform a 'fuzzy' comparison between two strings. Returns: float: match percentage -- 1.0 for perfect match, down to 0.0 for no match at all.","title":"fuzzy_match"},{"location":"mycroft_lang_utils.res/","text":"Module mycroft_lang_utils.res Module mycroft_lang_utils.res.text Module mycroft_lang_utils.res.text.da-dk Module mycroft_lang_utils.res.text.de-de Module mycroft_lang_utils.res.text.en-au Module mycroft_lang_utils.res.text.en-us Module mycroft_lang_utils.res.text.es-es Module mycroft_lang_utils.res.text.fr-fr Module mycroft_lang_utils.res.text.hu-hu Module mycroft_lang_utils.res.text.it-it Module mycroft_lang_utils.res.text.nl-nl Module mycroft_lang_utils.res.text.ru-ru Module mycroft_lang_utils.res.text.sv-se Module mycroft_lang_utils.res.text.tr-tr","title":"Mycroft lang utils.res"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsres","text":"","title":"Module mycroft_lang_utils.res"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestext","text":"","title":"Module mycroft_lang_utils.res.text"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestextda-dk","text":"","title":"Module mycroft_lang_utils.res.text.da-dk"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestextde-de","text":"","title":"Module mycroft_lang_utils.res.text.de-de"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestexten-au","text":"","title":"Module mycroft_lang_utils.res.text.en-au"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestexten-us","text":"","title":"Module mycroft_lang_utils.res.text.en-us"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestextes-es","text":"","title":"Module mycroft_lang_utils.res.text.es-es"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestextfr-fr","text":"","title":"Module mycroft_lang_utils.res.text.fr-fr"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestexthu-hu","text":"","title":"Module mycroft_lang_utils.res.text.hu-hu"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestextit-it","text":"","title":"Module mycroft_lang_utils.res.text.it-it"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestextnl-nl","text":"","title":"Module mycroft_lang_utils.res.text.nl-nl"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestextru-ru","text":"","title":"Module mycroft_lang_utils.res.text.ru-ru"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestextsv-se","text":"","title":"Module mycroft_lang_utils.res.text.sv-se"},{"location":"mycroft_lang_utils.res/#module-mycroft_lang_utilsrestexttr-tr","text":"","title":"Module mycroft_lang_utils.res.text.tr-tr"},{"location":"mycroft_lang_utils.res.text.da-dk/","text":"Module mycroft_lang_utils.res.text.da-dk","title":"Mycroft lang utils.res.text.da dk"},{"location":"mycroft_lang_utils.res.text.da-dk/#module-mycroft_lang_utilsrestextda-dk","text":"","title":"Module mycroft_lang_utils.res.text.da-dk"},{"location":"mycroft_lang_utils.res.text.de-de/","text":"Module mycroft_lang_utils.res.text.de-de","title":"Mycroft lang utils.res.text.de de"},{"location":"mycroft_lang_utils.res.text.de-de/#module-mycroft_lang_utilsrestextde-de","text":"","title":"Module mycroft_lang_utils.res.text.de-de"},{"location":"mycroft_lang_utils.res.text.en-au/","text":"Module mycroft_lang_utils.res.text.en-au","title":"Mycroft lang utils.res.text.en au"},{"location":"mycroft_lang_utils.res.text.en-au/#module-mycroft_lang_utilsrestexten-au","text":"","title":"Module mycroft_lang_utils.res.text.en-au"},{"location":"mycroft_lang_utils.res.text.en-us/","text":"Module mycroft_lang_utils.res.text.en-us","title":"Mycroft lang utils.res.text.en us"},{"location":"mycroft_lang_utils.res.text.en-us/#module-mycroft_lang_utilsrestexten-us","text":"","title":"Module mycroft_lang_utils.res.text.en-us"},{"location":"mycroft_lang_utils.res.text.es-es/","text":"Module mycroft_lang_utils.res.text.es-es","title":"Mycroft lang utils.res.text.es es"},{"location":"mycroft_lang_utils.res.text.es-es/#module-mycroft_lang_utilsrestextes-es","text":"","title":"Module mycroft_lang_utils.res.text.es-es"},{"location":"mycroft_lang_utils.res.text.fr-fr/","text":"Module mycroft_lang_utils.res.text.fr-fr","title":"Mycroft lang utils.res.text.fr fr"},{"location":"mycroft_lang_utils.res.text.fr-fr/#module-mycroft_lang_utilsrestextfr-fr","text":"","title":"Module mycroft_lang_utils.res.text.fr-fr"},{"location":"mycroft_lang_utils.res.text.hu-hu/","text":"Module mycroft_lang_utils.res.text.hu-hu","title":"Mycroft lang utils.res.text.hu hu"},{"location":"mycroft_lang_utils.res.text.hu-hu/#module-mycroft_lang_utilsrestexthu-hu","text":"","title":"Module mycroft_lang_utils.res.text.hu-hu"},{"location":"mycroft_lang_utils.res.text.it-it/","text":"Module mycroft_lang_utils.res.text.it-it","title":"Mycroft lang utils.res.text.it it"},{"location":"mycroft_lang_utils.res.text.it-it/#module-mycroft_lang_utilsrestextit-it","text":"","title":"Module mycroft_lang_utils.res.text.it-it"},{"location":"mycroft_lang_utils.res.text/","text":"Module mycroft_lang_utils.res.text Module mycroft_lang_utils.res.text.da-dk Module mycroft_lang_utils.res.text.de-de Module mycroft_lang_utils.res.text.en-au Module mycroft_lang_utils.res.text.en-us Module mycroft_lang_utils.res.text.es-es Module mycroft_lang_utils.res.text.fr-fr Module mycroft_lang_utils.res.text.hu-hu Module mycroft_lang_utils.res.text.it-it Module mycroft_lang_utils.res.text.nl-nl Module mycroft_lang_utils.res.text.ru-ru Module mycroft_lang_utils.res.text.sv-se Module mycroft_lang_utils.res.text.tr-tr","title":"Mycroft lang utils.res.text"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestext","text":"","title":"Module mycroft_lang_utils.res.text"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestextda-dk","text":"","title":"Module mycroft_lang_utils.res.text.da-dk"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestextde-de","text":"","title":"Module mycroft_lang_utils.res.text.de-de"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestexten-au","text":"","title":"Module mycroft_lang_utils.res.text.en-au"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestexten-us","text":"","title":"Module mycroft_lang_utils.res.text.en-us"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestextes-es","text":"","title":"Module mycroft_lang_utils.res.text.es-es"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestextfr-fr","text":"","title":"Module mycroft_lang_utils.res.text.fr-fr"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestexthu-hu","text":"","title":"Module mycroft_lang_utils.res.text.hu-hu"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestextit-it","text":"","title":"Module mycroft_lang_utils.res.text.it-it"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestextnl-nl","text":"","title":"Module mycroft_lang_utils.res.text.nl-nl"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestextru-ru","text":"","title":"Module mycroft_lang_utils.res.text.ru-ru"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestextsv-se","text":"","title":"Module mycroft_lang_utils.res.text.sv-se"},{"location":"mycroft_lang_utils.res.text/#module-mycroft_lang_utilsrestexttr-tr","text":"","title":"Module mycroft_lang_utils.res.text.tr-tr"},{"location":"mycroft_lang_utils.res.text.nl-nl/","text":"Module mycroft_lang_utils.res.text.nl-nl","title":"Mycroft lang utils.res.text.nl nl"},{"location":"mycroft_lang_utils.res.text.nl-nl/#module-mycroft_lang_utilsrestextnl-nl","text":"","title":"Module mycroft_lang_utils.res.text.nl-nl"},{"location":"mycroft_lang_utils.res.text.ru-ru/","text":"Module mycroft_lang_utils.res.text.ru-ru","title":"Mycroft lang utils.res.text.ru ru"},{"location":"mycroft_lang_utils.res.text.ru-ru/#module-mycroft_lang_utilsrestextru-ru","text":"","title":"Module mycroft_lang_utils.res.text.ru-ru"},{"location":"mycroft_lang_utils.res.text.sv-se/","text":"Module mycroft_lang_utils.res.text.sv-se","title":"Mycroft lang utils.res.text.sv se"},{"location":"mycroft_lang_utils.res.text.sv-se/#module-mycroft_lang_utilsrestextsv-se","text":"","title":"Module mycroft_lang_utils.res.text.sv-se"},{"location":"mycroft_lang_utils.res.text.tr-tr/","text":"Module mycroft_lang_utils.res.text.tr-tr","title":"Mycroft lang utils.res.text.tr tr"},{"location":"mycroft_lang_utils.res.text.tr-tr/#module-mycroft_lang_utilsrestexttr-tr","text":"","title":"Module mycroft_lang_utils.res.text.tr-tr"},{"location":"mycroft_lang_utils.time/","text":"Module mycroft_lang_utils.time default_timezone def default_timezone() Get the default timezone default system value Returns: (datetime.tzinfo): Definition of the default timezone now_local ``` def now_local(tz=None) ``` Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time now_utc def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT to_local def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone to_utc def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"time"},{"location":"mycroft_lang_utils.time/#module-mycroft_lang_utilstime","text":"","title":"Module mycroft_lang_utils.time"},{"location":"mycroft_lang_utils.time/#default95timezone","text":"def default_timezone() Get the default timezone default system value Returns: (datetime.tzinfo): Definition of the default timezone","title":"default_timezone"},{"location":"mycroft_lang_utils.time/#now95local","text":"``` def now_local(tz=None) ``` Retrieve the current time Args: tz (datetime.tzinfo, optional): Timezone, default to user's settings Returns: (datetime): The current time","title":"now_local"},{"location":"mycroft_lang_utils.time/#now95utc","text":"def now_utc() Retrieve the current time in UTC Returns: (datetime): The current time in Universal Time, aka GMT","title":"now_utc"},{"location":"mycroft_lang_utils.time/#to95local","text":"def to_local(dt) Convert a datetime to the user's local timezone Args: dt (datetime): A datetime (if no timezone, defaults to UTC) Returns: (datetime): time converted to the local timezone","title":"to_local"},{"location":"mycroft_lang_utils.time/#to95utc","text":"def to_utc(dt) Convert a datetime with timezone info to a UTC datetime Args: dt (datetime): A datetime (presumably in some local zone) Returns: (datetime): time converted to UTC","title":"to_utc"}]}